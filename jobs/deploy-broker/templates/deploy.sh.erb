#!/bin/bash
set -e -x

  <%
    def grab_app_domain_name
      app_domains_str = properties.app_domains.to_s
      array_start = ( app_domains_str =~ /^\[/ )
      if (array_start == 0)
        app_domain_entry = app_domains_str.gsub(/^\[/, '').gsub(/\]/,'').gsub(/,.*/, '')
      else
        app_domain_entry = app_domains_str
      end
      app_domain_entry
    end
    app_domain = grab_app_domain_name
  %>

SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export PATH="/var/vcap/packages/cf_cli/bin:$PATH"

export SCHEME=https
export ADMIN_USER=<%= properties.ecs_broker.cf.admin_user %>
export ADMIN_PASSWORD=<%= properties.ecs_broker.cf.admin_password %>
export DOMAIN=<%= properties.domain %>
export APP_DOMAIN=<%="#{app_domain}"%>
export API_ENDPOINT=$SCHEME://api.${DOMAIN}
export APP_NAME=<%= properties.ecs_broker.app_name %>
export APP_VERSION=<%= properties.ecs_broker.app_version %>
export APP_URI=<%= properties.ecs_broker.app_uri %>
export ORG=${APP_NAME}-service-org
export SPACE=${APP_NAME}-service-space
export QUOTA=${APP_NAME}-service-quota
export CF_TARGET=$API_ENDPOINT
export CF_ORG=$ORG
export CF_SPACE=$SPACE
export CF_USER=$ADMIN_USER
export CF_PASSWORD=$ADMIN_PASSWORD
export CF_SKIP_SSL=<%= properties.ssl.skip_cert_verify %>
export ORG_QUOTA=<%= properties.ecs_broker.app_push.org_quota %>
export APP_PUSH_TIMEOUT=<%= properties.ecs_broker.app_push.timeout %>
export APP_PUSH_MEMORY=<%= properties.ecs_broker.app_push.memory %>
export BROKER_NAME=${APP_NAME}-${APP_VERSION}-service-broker
export BROKER_USER=<%= properties.ecs_broker.broker.user %>
export BROKER_PASSWD=<%= properties.ecs_broker.broker.password %>
export SECURITY_USER_NAME=<%= properties.ecs_broker.broker.user %>
export SECURITY_USER_PASSWORD=<%= properties.ecs_broker.broker.password %>

export CREATE_OPEN_SECURITY_GROUP=<%= properties.ecs_broker.create_open_security_group %>
export DELETE_PREV_APP_INSTANCE=<%= properties.ecs_broker.delete_prev_app_instance %>

export SB_APP_ENV="setupServiceBrokerEnv.sh"

export EXPLODED_APP_FOLDER="exploded-app-contents"

export BROKER_MANAGEMENT_ENDPOINT=<%= properties.ecs_broker.management_endpoint %>

export CF_HOME=`pwd`/home/cf
mkdir -p $CF_HOME

# Following variables would be replaced based on blobs that get added and are considered as app bits
# Modify extension type for App file - modify as needed
APP_PREFIX_NAME=ecs-cf-service-broker
EXTENSION_TYPE=jar

TARGET_APP=${APP_PREFIX_NAME}.${EXTENSION_TYPE}
JOB_NAME=deploy-service-broker
PACKAGE_NAME_SUFFIX=service_broker
PACKAGE_PATH=`echo /var/vcap/packages/*_${PACKAGE_NAME_SUFFIX}`

RUN_DIR=/var/vcap/sys/run/$JOB_NAME
LOG_DIR=/var/vcap/sys/log/$JOB_NAME
PIDFILE=${RUN_DIR}/pid

export DEBUG_LOG=$LOG_DIR/deploy-service-broker.log

mkdir -p $RUN_DIR $LOG_DIR
chown -R vcap:vcap $RUN_DIR $LOG_DIR

function log_debug() {
  echo `date` $1 >> $DEBUG_LOG
}

function authenticate_and_target() {
  cf api $API_ENDPOINT <% if properties.ssl.skip_cert_verify %>--skip-ssl-validation<% end %>
  cf auth $ADMIN_USER $ADMIN_PASSWORD
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_quota() {
  cf create-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10
  cf update-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10 --disallow-paid-service-plans
  cf set-quota $ORG $QUOTA
}

function create_open_security_group() {
  if [ "${CREATE_OPEN_SECURITY_GROUP}" == "true" ]; then
    echo "Creating open security group"

    cf create-security-group all_open /var/vcap/packages/deploy-broker/all_open.json
    cf bind-running-security-group all_open
  else
    echo "Not creating open security group"
  fi
}

function restart_app() {
  CF_TRACE=true cf restart ${APP_NAME}-${APP_VERSION}
  cf logs ${APP_NAME}-${APP_VERSION} --recent
}

function wait_till_running() {
  for i in `seq 1  6`
  do
    CF_TRACE=true cf app ${APP_NAME}-${APP_VERSION} | grep RUNNING | grep ${APP_NAME}-${APP_VERSION}
    if [ "$?" -ne "0" ]; then
      log_debug "App not running yet..."
      sleep 10
    else
      log_debug "App now up and running ..."
      break
    fi
  done
}

function modify_app() {
  pushd $PACKAGE_PATH/$SUBDIR

  if [ -n "${BROKER_MANAGEMENT_ENDPOINT}" ]; then

    # strip protocol from mgmt endpoint...
    ecs_ip=$(echo "${BROKER_MANAGEMENT_ENDPOINT}" | sed 's/https*:\/\///')
    echo "management ip is: ${ecs_ip}"

    echo | openssl s_client -connect ${ecs_ip} 2>&1 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > ecs_cert.pem
    stat ecs_cert.pem

    mkdir -p ${EXPLODED_APP_FOLDER}

    cd ${EXPLODED_APP_FOLDER}
    unzip ${PACKAGE_PATH}/lib/${APP_PREFIX_NAME}*.${EXTENSION_TYPE}
    cp "${PACKAGE_PATH}/${SUBDIR}/ecs_cert.pem" BOOT-INF/classes/ecs_cert.pem
    cp "${SCRIPT_PATH}/../application.yml" BOOT-INF/classes/application.yml

    zip -r ${PACKAGE_PATH}/lib/${TARGET_APP} *
#  else
#    cp ${PACKAGE_PATH}/lib/${APP_PREFIX_NAME}*.${EXTENSION_TYPE}  ${PACKAGE_PATH}/lib/${TARGET_APP}
  fi

  popd
}

function delete_prev_app_instance() {

  cf apps | grep ${APP_NAME}-${APP_VERSION}
  existing_app_check=$?

  if [ "$existing_app_check" == "0" ]; then

    # Look for User-Provided env variables and stop after the first blank line after that
    cf env ${APP_NAME}-${APP_VERSION} | awk 'f{print}/User-Provided/{f=1};/^ *$/{f=0}' \
                | grep '.' | awk -F ':' '{print $1}' | while read env_variable_name
    do
      cf unset-env $env_variable_name
    done
    cf delete -f ${APP_NAME}-${APP_VERSION}  > /dev/null
  fi
}

function push_app() {
  pushd $PACKAGE_PATH
    mkdir -p /var/vcap/data/tmp
    export TMPDIR=/var/vcap/data/tmp

    # TODO -- add back in the timeouts and quotas for the app push?  Or remove them from the errand props?

    cf push ${APP_NAME}-${APP_VERSION} -p ${PACKAGE_PATH}/lib/${TARGET_APP} -t 180 --no-start
    cf logs ${APP_NAME}-${APP_VERSION} --recent
  popd
}

function register_on_demand_plans() {
  pushd $PACKAGE_PATH
    mkdir -p /var/vcap/data/tmp
    # Sleep for a bit so the app is up
    sleep 30
    app_endpoint=http://${BROKER_USER}:${BROKER_PASSWD}@${APP_URI}.${APP_DOMAIN}
    app_catalog_url=${app_endpoint}/v2/catalog
    catalog_output=`curl -X GET ${app_catalog_url} 2>/dev/null`
    log_debug "Service Broker App Catalog output : $catalog_output"

    service_id=`echo $catalog_output | sed -e 's/"//g'  | sed -e "s/name:/\nname:/g" | grep "id:" | grep services | sed -e "s/^.*id://g;s/,//" `
    #plan_id=`echo $catalog_output | sed -e 's/"//g'  | sed -e "s/name:/\nname:/g" | grep "id:" | grep plans | sed -e "s/^.*id://g;s/,//" `
    log_debug "Catalog Service Id : $service_id "

    <% if properties.ecs_broker.on_demand_service_plans %>
      <%  p("ecs_broker.on_demand_service_plans").each do |plan|
             plan_name=plan['plan_name']
             plan_descrp=plan['plan_description']
             plan_details=plan['plan_details'].gsub('\n','')
      %>
        export PLAN_ID=<%="#{plan_name}"%>
        export PLAN_DESCRP=<%="#{plan_descrp}"%>
        export PLAN_DETAILS='<%="#{plan_details}"%>'
        log_debug "Service plan name ${PLAN_ID}, described as ${PLAN_DESCRP} and details: ${PLAN_DETAILS}"

        bullets_name_value_multiline=`echo $PLAN_DETAILS | sed -e "s/;/,/g" | awk -F ":" '{print "\"" $1 "\" : \"" $2 "\", " }' `
        bullets_value_descrp_singleline=`echo $PLAN_DETAILS | sed -e "s/;/,\n/g;"  | awk -F ":" '{print "\""$2  $3"\"" }' | sed -e 's/,"/",/g' `

        cat > /var/vcap/data/tmp/${PLAN_ID}.service_plan.json << EOF
{
  "name" : "$PLAN_ID",
  "description" : "$PLAN_DESCRP",
  "metadata" : {
     "name" : "$PLAN_ID",
     "displayName" : "$PLAN_ID",
     "description" : "$PLAN_DESCRP",
     $bullets_name_value_multiline
     "bullets" : [
        "$PLAN_ID $PLAN_DESCRP",
        $bullets_value_descrp_singleline ]
   }
}
EOF

         log_debug "Copied over default service plan file template with ${PLAN_ID} and updated it"
         new_plan=`cat /var/vcap/data/tmp/${PLAN_ID}.service_plan.json`
         log_debug "Contents of the plan: ${new_plan} "
         plan_creation_output=`curl ${app_catalog_url}/services/${service_id}/plans -X POST -H "Content-Type:application/json" -d @/var/vcap/data/tmp/${PLAN_ID}.service_plan.json `
         log_debug "Service Plan created!!"
         log_debug "Service Plan details: ${plan_creation_output}"
       <% end %>
    <% end %>

  popd
}

cf -v
authenticate_and_target
create_open_security_group
create_quota

modify_app
push_app

restart_app
wait_till_running
